import { promises as fs } from 'fs';
import { join } from 'path';

export class LoggerService {
  private static readonly QA_LOG_FILE = join(process.cwd(), 'Q&A.md');
  private static readonly PRODUCTS_LOG_FILE = join(process.cwd(), 'RecProducts.md');

  /**
   * Logs Q&A interactions to Q&A.md file
   */
  static async logQAInteraction(data: {
    caseId: string;
    userEmail: string;
    timestamp: Date;
    woundType: string;
    audience: string;
    aiModel: string;
    questions: Array<{
      question: string;
      answer: string;
      category: string;
      confidenceImpact: string;
    }>;
    finalConfidence: number;
    reassessment?: string;
  }) {
    try {
      const timestamp = data.timestamp.toISOString();
      const formattedDate = new Date(timestamp).toLocaleString();
      
      const logEntry = `
---
## Case: ${data.caseId}
**User:** ${data.userEmail}  
**Date:** ${formattedDate}  
**Wound Type:** ${data.woundType}  
**Audience:** ${data.audience}  
**AI Model:** ${data.aiModel}  
**Final Confidence:** ${data.finalConfidence}%  

${data.reassessment ? `**AI Reassessment:** ${data.reassessment}\n\n` : ''}### Questions & Answers:
${data.questions.map((qa, index) => `
**Q${index + 1}:** ${qa.question}  
**A${index + 1}:** ${qa.answer}  
**Category:** ${qa.category}  
**Impact:** ${qa.confidenceImpact}  
`).join('\n')}

---

`;

      await this.appendToFile(this.QA_LOG_FILE, logEntry);
      console.log(`Q&A interaction logged for case ${data.caseId}`);
    } catch (error) {
      console.error('Error logging Q&A interaction:', error);
    }
  }

  /**
   * Logs product recommendations to RecProducts.md file
   */
  static async logProductRecommendations(data: {
    caseId: string;
    userEmail: string;
    timestamp: Date;
    woundType: string;
    audience: string;
    aiModel: string;
    products: Array<{
      category: string;
      productName: string;
      amazonLink: string;
      reason: string;
    }>;
  }) {
    try {
      const timestamp = data.timestamp.toISOString();
      const formattedDate = new Date(timestamp).toLocaleString();
      
      const logEntry = `
---
## Case: ${data.caseId}
**User:** ${data.userEmail}  
**Date:** ${formattedDate}  
**Wound Type:** ${data.woundType}  
**Audience:** ${data.audience}  
**AI Model:** ${data.aiModel}  

### Product Recommendations:
${data.products.map((product, index) => `
**${index + 1}. ${product.category}**  
Product: ${product.productName}  
Link: ${product.amazonLink}  
Reason: ${product.reason}  
`).join('\n')}

---

`;

      await this.appendToFile(this.PRODUCTS_LOG_FILE, logEntry);
      console.log(`Product recommendations logged for case ${data.caseId}`);
    } catch (error) {
      console.error('Error logging product recommendations:', error);
    }
  }

  /**
   * Helper method to append content to a file
   */
  private static async appendToFile(filePath: string, content: string) {
    try {
      // Check if file exists, if not create it with header
      try {
        await fs.access(filePath);
      } catch {
        const fileName = filePath.includes('Q&A') ? 'Q&A' : 'Product Recommendations';
        const header = `# ${fileName} Log
Generated by Wound Nurses AI System

`;
        await fs.writeFile(filePath, header);
      }

      await fs.appendFile(filePath, content);
    } catch (error) {
      console.error(`Error writing to ${filePath}:`, error);
      throw error;
    }
  }

  /**
   * Get recent Q&A entries (for debugging or display)
   */
  static async getRecentQAEntries(limit: number = 10): Promise<string> {
    try {
      const content = await fs.readFile(this.QA_LOG_FILE, 'utf-8');
      const entries = content.split('---').filter(entry => entry.trim().length > 0);
      return entries.slice(-limit).join('---');
    } catch (error) {
      console.error('Error reading Q&A log:', error);
      return '';
    }
  }

  /**
   * Get recent product recommendations (for debugging or display)
   */
  static async getRecentProductEntries(limit: number = 10): Promise<string> {
    try {
      const content = await fs.readFile(this.PRODUCTS_LOG_FILE, 'utf-8');
      const entries = content.split('---').filter(entry => entry.trim().length > 0);
      return entries.slice(-limit).join('---');
    } catch (error) {
      console.error('Error reading product recommendations log:', error);
      return '';
    }
  }
}